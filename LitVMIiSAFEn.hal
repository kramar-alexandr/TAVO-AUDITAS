//Versija: 1.1.3.STD exp su minusu KP fakturose
//Versija: 1.1.4.STD pataisytas eksportas registrus eksportuojant atskirai: <PartNumber> 
//Versija: 1.1.5.STD - prideta nullables eksportas taguose <VATPointDate>,<VATPointDate2><TaxPercentage>
//Versija: 1.1.6.STD - pataisyta klaida eksportuojant <ReferenceDate>
//Versija: 1.1.7.STD - pridetas filtras "Ne°tr. mok˜jimo sˆlyg÷"

external inner procedure NewLineExport();
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner function val FindVAT(string,val,Integer,Integer);
external inner procedure GetVATdouble(string,var val,var val,Integer);
external inner procedure GetVATproc(string,Integer,var val);
external inner function string 255 StripCharacter(string,string);
external inner function roundmode SetRoundModeD(Integer);
external inner function string 255 SetVATZoneLabel();// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 19 January 2018 11:13:22

forward function string 255 VATZoneEditFieldLabelLIT(Integer);// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 19 January 2018 11:18:44

//Report tools
external inner procedure HT2Per(Date, Date , var string);

SetLangMode(LangLithuanian,"LIT",0)

event startup
begin
  Export("i.SAF dokument÷ eksportas",LitVMIiSAFEClass,LitVMIiSAFEn,modSL);
  Export("i.SAF dokument÷ eksportas",LitVMIiSAFEClass,LitVMIiSAFEn,modPL);
  Report("i.SAF dokument÷ sˆraäas",LitVMIiSAFRClass,LitVMIiSAFRn,0,modSL);
  Report("i.SAF dokument÷ sˆraäas",LitVMIiSAFRClass,LitVMIiSAFRn,0,modPL);
  
  
  SString(23871,"Pilnas failas");
  SString(23872,"Iäraäomos PVM s.f.");
  SString(23873,"Gaunamos PVM s.f.");
  SString(23874,"Rinkmena sukurta:");
  SString(23875,"Rinkmenos versija:");
  SString(23876,"P.¯. kðr˜jas:");
  SString(23877,"P.¯. pavadinimas:");
  SString(23878,"P.¯. versija:");
  SString(23879,"Teikiam÷ duom.tipas:");
  SString(23880,"Dali÷ sk.:");
  SString(23881,"Registracijos kodas:");
  SString(23882,"Prek./pasl.data");
  SString(23883,"Reg.apsk.data");
  SString(23884,"Mokes‹.kd.");
  SString(23885,"M.tarif.");
  SString(23886,"Apmokest.vert˜");
  //SString(23887,"Klaida. Blogai pasirinktas filtravimas:");
  //SString(23888,"Pagal Registracijos nr. galimas filtravimas tik su fakt.tipu: 'Viena'..");
  SString(23889,"Pagrindin˜ duomen÷ byla");
  SString(23890,"Pirmini÷ dokument÷ duomenys");
  //SString(23891,"dalis");
  return;
end;

window LitVMIiSAFEClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("i.SAF dokument÷ eksportas",LitVMIiSAFEClass,CGEcW,RcType);
  SetWRect(20,80,450,340);
  v= 6; vs = 20;
  PeriodField(h=150,v,"Periodas");
  EditFieldTL(h, v+=20, 150,"Serija", M4UStr, Normal, 21, f4, false, 0);
  //EditFieldTL(h,v+=vs, 150,"Nr.",   M4Str,Normal,30,f1,false,0);
  //EditFieldTL(h,v+=vs, 150,"Pirk˜jas",M4UStr,Normal,30,f2,false,CUSClass);
  //EditFieldTL(h,v+=vs, 150,"Prek˜",M4UStr,Normal,30,f3,false,INSClass);
  EditFieldTL(h, v+=20, 150,"Ne°tr. mok˜jimo sˆlyg÷", M4UStr, Normal, 21, f5, false, PDSClass);
  ButtonFrame(h=70,v+=40,120,5,"PVM sritis");
  CheckBox(h,vm=v,0,"Vietin˜",flags[5]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1),flags[6]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1) & "(su PVM)",flags[9]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2),flags[7]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2) & "(su PVM)",flags[10]);
  
  ButtonFrame(h=220,v=86,140,2,"Rðäiuoti pagal");
  RadioButton(h,v,1,0,"Operacijos datˆ",flags[1]);
  RadioButton(h,v+=16,0,0,"Faktðros datˆ",flags[1]);
  
  ButtonFrame(h=80,v+=90,150,2,"Eksportuoti");
  RadioButton(h,v,0,0,"Gaunam÷ ir iäraäom÷ PVM s.f. registrus",flags[0]);
  RadioButton(h,v+=16,1,0,"Tik iäraäom÷ PVM s.f. registrˆ",flags[0]);
  RadioButton(h,v+=16,2,0,"Tik gaunam÷ PVM s.f. registrˆ",flags[0]);
  CheckBox(h, v+=30, 0, "¯traukti °raäus iä avansin˜s apyskaitos", flags[11]);
  CheckBox(h, v+=16,0,"Vietoje PVM mok. kd. naudoti ¯mon˜s kd.",flags[8]);
  EndWindow;
end;

window LitVMIiSAFRClass:2
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("i.SAF dokument÷ sˆraäas",LitVMIiSAFRClass,CGRcW,RcType);
  SetWRect(20,80,450,340);
  v= 6; vs = 20;
  PeriodField(h=150,v,"Periodas");
  EditFieldTL(h, v+=20, 150,"Serija", M4UStr, Normal, 21, f4, false, 0);
  //EditFieldTL(h,v+=vs, 150,"Nr.",   M4Str,Normal,30,f1,false,0);
  //EditFieldTL(h,v+=vs, 150,"Pirk˜jas",M4UStr,Normal,30,f2,false,CUSClass);
  //EditFieldTL(h,v+=vs, 150,"Prek˜",M4UStr,Normal,30,f3,false,INSClass);
  EditFieldTL(h, v+=20, 150,"Ne°tr. mok˜jimo sˆlyg÷", M4UStr, Normal, 21, f5, false, PDSClass);
  ButtonFrame(h=70,v+=40,120,5,"PVM sritis");
  CheckBox(h,vm=v,0,"Vietin˜",flags[5]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1),flags[6]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(1) & "(su PVM)",flags[9]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2),flags[7]);
  CheckBox(h,v+=16,0,VATZoneEditFieldLabelLIT(2) & "(su PVM)",flags[10]);
  
  ButtonFrame(h=220,v=86,140,2,"Rðäiuoti pagal");
  RadioButton(h,v,1,0,"Operacijos datˆ",flags[1]);
  RadioButton(h,v+=16,0,0,"Faktðros datˆ",flags[1]);
  
  ButtonFrame(h=80,v+=90,150,2,"Eksportuoti");
  RadioButton(h,v,0,0,"Gaunam÷ ir iäraäom÷ PVM s.f. registrus",flags[0]);
  RadioButton(h,v+=16,1,0,"Tik iäraäom÷ PVM s.f. registrˆ",flags[0]);
  RadioButton(h,v+=16,2,0,"Tik gaunam÷ PVM s.f. registrˆ",flags[0]);
  CheckBox(h, v+=30, 0, "¯traukti °raäus iä avansin˜s apyskaitos", flags[11]);
  CheckBox(h, v+=16, 0, "Rodyti info apie pirk˜jˆ kiekvienoje faktðroje", flags[21]);
  CheckBox(h, v+=16, 0,"Vietoje PVM mok. kd. naudoti ¯mon˜s kd.",flags[8]);

  EndWindow;
end;

global
function string 255 VATZoneEditFieldLabelLIT(Integer typ)// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 19 January 2018 11:18:47
begin
  string 255 label,res;
    
  label = SetVATZoneLabel;
  
  if (blank(label)) then begin 
    switch (typ) begin
      case 1: res = "ES "; 
      case 2: res = "Ne ES "; 
    end;
  end else begin
    switch (typ) begin
      case 1: res = "Vietin˜ " & label & " ";
      case 2: res = "Eksport. " & label & " ";
    end;
  end; 
  VATZoneEditFieldLabelLIT = res;
  return;
end;//this procedure was deleted from 8.4 StabdardERP??????// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 19 January 2018 11:20:20

global
procedure LitVMIiSAFEClassReportDefaults(Integer wn)
begin

  Record RcVc RepSpec;

  deselectWindow(wn, false);
  getWindowRecord(wn, RepSpec);
  reportDefaults(RepSpec, "LitVMIiSAFEClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[9] = 1;
  putWindowRecord(wn, RepSpec);
  selectWindow(wn);

  return;
end;

global
procedure LitVMIiSAFRClassReportDefaults(Integer wn)
begin

  Record RcVc RepSpec;

  deselectWindow(wn, false);
  getWindowRecord(wn, RepSpec);
  reportDefaults(RepSpec, "LitVMIiSAFRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[9] = 1;
  putWindowRecord(wn, RepSpec);
  selectWindow(wn);

  return;
end;

global
function Boolean LitVMIiSAFEClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  date perds,perde;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  
  perds.day = 1; perds.month = 10; perds.year = 2016;
  perde.day = 31; perde.month = 10; perde.year = 2016;
  if (RepSpec.flags[0]!=0) then begin
  if (DateInRange(RepSpec.sStartDate,perds,perde)) or 
  	(DateInRange(RepSpec.sEndDate,perds,perde) or 
  	 (RepSpec.sStartDate<perds) and RepSpec.sEndDate>perde) then begin
    MessageBox(0, "Uì 2016-10 periodˆ galima eksportuoti tik su poìymiu 'Gaunam÷ ir iäraäom÷ PVM s.f. registrus'");
    res = false;
    goto LLitVMIiSAFEClassOnOKWindow;
  end;
  end;
  
  
LLitVMIiSAFEClassOnOKWindow:;
  LitVMIiSAFEClassOnOKWindow = res;
  return;
end;

global
function Boolean LitVMIiSAFRClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  date perds,perde;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  
  perds.day = 1; perds.month = 10; perds.year = 2016;
  perde.day = 31; perde.month = 10; perde.year = 2016;
  if (RepSpec.flags[0]!=0) then begin
  if (DateInRange(RepSpec.sStartDate,perds,perde)) or 
  	(DateInRange(RepSpec.sEndDate,perds,perde) or 
  	 (RepSpec.sStartDate<perds) and RepSpec.sEndDate>perde) then begin
    MessageBox(0, "Uì 2016-10 periodˆ galima eksponuoti tik su poìymiu 'Gaunam÷ ir iäraäom÷ PVM s.f. registrus'");
    res = false;
    goto LLitVMIiSAFRClassOnOKWindow;
  end;
  end;
  
  
LLitVMIiSAFRClassOnOKWindow:;
  LitVMIiSAFRClassOnOKWindow = res;
  return;
end;

//XML tools start --------------------------------------------
function string 255 ConvertXMLSpecCharsInStr(string str)
begin
  string 255 res;
  string 1 char;
  string 10 new_char;
  Integer i, n;

  n = len(str);
  for (i = 0; i < n; i = i + 1) begin
    char = Mid(str, i, 1);
    switch (char) begin
      case "&": new_char = "&amp;";
      case "<": new_char = "&lt;";
      case ">": new_char = "&gt;";
      case """": new_char = "&quot;";
      case "”": new_char = "&#8221;";
      case "'": new_char = "&apos;";
      otherwise new_char = char;
    end;
    res = res & new_char;
  end;
  ConvertXMLSpecCharsInStr = res;
  return;
end;


function string 255 ConvXMLSpecCharTest(string str, boolean rep)
begin
  string 255 res;
  
  if (rep) then begin
  	res = str;
  end else begin
    res = ConvertXMLSpecCharsInStr(str);
  end;
  
  ConvXMLSpecCharTest = res;
  return;
end;

function string 100 TagLevel(integer cnt)
begin
  string 100 res;
  integer i;
  
  for (i=0;i<cnt;i=i+1) begin
  	res = res & chr(9);
  end;
  ExportPadString(res,cnt," ",false);
  TagLevel = res;
  return;
end;

procedure XMLLineOut(string tmpstr,integer lvl)
begin
  TagLevel(lvl);
  ExportPadString(tmpstr,BytesInString(tmpstr)," ",false);
  NewLineExport;
  return;
end;

procedure XMLTagOut(string tagname,string tagvalue,integer lvl)
begin
  string 255 tstr;
  
  TagLevel(lvl);
  ExportPadString("<",1," ",false);
  ExportPadString(tagname,len(tagname)," ",false);
  ExportPadString(">",1," ",false);  
  ExportPadString(tagvalue,BytesInString(tagvalue)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tagname,len(tagname)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure XMLInclNullTagOut(string tagname,string tagvalue,integer lvl)
begin
  string 255 tstr;
  
  TagLevel(lvl);

  if (tagvalue!="") then begin
    ExportPadString("<",1," ",false);
    ExportPadString(tagname,len(tagname)," ",false);
    ExportPadString(">",1," ",false);  
    ExportPadString(tagvalue,BytesInString(tagvalue)," ",false);
    ExportPadString("</",2," ",false);
    ExportPadString(tagname,len(tagname)," ",false);
    ExportPadString(">",1," ",false);
  end else begin
    ExportPadString("<",1," ",false);
    ExportPadString(tagname,len(tagname)," ",false);
    ExportPadString(" xsi:nil=""true"" ",16," ",false);
    ExportPadString("/>",2," ",false);
  end;
  NewLineExport;
  return;
end;

procedure XMLHeaderStart()
begin
  string 255 tmpstr;
  
  tmpstr = "<?xml version=""1.0"" encoding=""UTF-8""?>";
  ExportPadString(tmpstr,len(tmpstr)," ",false);
  NewLineExport;
  tmpstr = "<iSAFFile xmlns=""http://www.vmi.lt/cms/imas/isaf"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">";
  ExportPadString(tmpstr,len(tmpstr)," ",false);
  NewLineExport;
  return;
end;

procedure XMLHeaderEnd()
begin
  XMLLineOut("</iSAFFile>",0);
  return;
end;
//XML tools end --------------------------------------------

function boolean CompareArrayVal(string value,array string aValue,integer cnt)
begin
  integer i;
  boolean res;
  
  res = false;
  for (i=0;i<cnt; i=i+1) begin
	if (aValue[i] == value) then begin
	  res = true;
	end;
  end;
  CompareArrayVal = res;
  return;
end;

procedure EmptyStrArray(var array string aMyArray,integer cnt)
begin
  Integer i;
  
  for (i=0;i<cnt;i=i+1) begin aMyArray[i] = ""; end;
  return;
end;

procedure EmptyValArray(var array val aMyArray,integer cnt)
begin
  Integer i;
  
  for (i=0;i<cnt;i=i+1) begin aMyArray[i] = blankval; end;
  return;
end;

procedure AddTotalsVATArray(var record SMVc VATr,string vatcode,val sum,val vat)
BEGIN
  row SMVc VATrw;
  Integer rwcnt,i;
  boolean foundf;
  
  foundf = false;
  rwcnt = MatRowCnt(VATr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (vatcode==VATrw.VATCode) then begin
      VATrw.DebVal = VATrw.DebVal + sum;
      VATrw.CredVal = VATrw.CredVal + vat;
      MatRowPut(VATr,i,VATrw);
      foundf = true;
    end;
  end;
  if !(foundf) then begin
    VATrw.VATCode = vatcode;
    VATrw.DebVal = sum;
    VATrw.CredVal = vat;
    MatRowPut(VATr,rwcnt,VATrw);
  end;
  RETURN;
END;

procedure AddToVATArray(string vatcode,val rowsum,date transdate, Integer InclVAT,integer NoTAXonVAT,
						var Array string avatcodes,var array val apercents,var array val aTxblVals,var array val aAmounts,var Integer avatcnt)
BEGIN
  Integer i;
  val vval,tax1val,rowvat,taxVal;
  boolean vatexistf;
  val aavat;
  
  vatexistf = false;
  if (blank(vatcode)) then begin
    goto LAddToVATArray;
  end;
  
  //logtext(0, "vat=" & FindVAT(vatcode,rowsum,InclVAT,NoTAXonVAT) & ", vatcode=" & vatcode & ", rowsum:" & rowsum & ", vat96Val=" & vat96Val & "; InclVAT=" & InclVAT)
  for (i=0;i<avatcnt;i=i+1) begin
    if (vatcode==avatcodes[i]) and (!vatexistf) then begin
	  rowvat = FindVAT(vatcode,rowsum,InclVAT,NoTAXonVAT);
      if (InclVAT == 0) then begin
		taxVal = rowsum;
	  end else begin
		taxVal = (rowsum - rowvat);
	  end;
	  aTxblVals[i] = aTxblVals[i] + taxVal;
	  aAmounts[i] = aAmounts[i] + rowvat;
      vatexistf = true;
    end;
  end;
  if (!vatexistf) then begin
  	  GetVATproc(vatcode,0,vval);
	  avatcodes[avatcnt] = vatcode;
	  apercents[avatcnt] = vval;
	  rowvat = FindVAT(vatcode,rowsum,InclVAT,NoTAXonVAT);
	  
	  if (InclVAT == 0) then begin
		taxVal = rowsum;
	  end else begin
		taxVal = (rowsum - rowvat);
	  end;
	  aTxblVals[avatcnt] = taxVal;
	  aAmounts[avatcnt] = rowvat;
	  avatcnt = avatcnt + 1;
  end;
LAddToVATArray:;  

  //for (i=0;i<avatcnt;i=i+1) begin
  	  //logtext(0, "avatcodes:" & avatcodes[i] & ", apercents:" & apercents[i] & ", aTxblVals:" & aTxblVals[i] & ", aAmounts:" &aAmounts[i])
  //end;
  RETURN;
END;


procedure FindVATExVatpr(string VATCode,var val ExVatpr)
BEGIN
  record VATCodeBlock VATr;
  row VATCodeBlock VATrw;
  Integer i,rwcnt;
  
  BlockLoad(VATr);
  rwcnt = MatRowCnt(VATr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (VATCode==VATrw.VATCode) then begin
      ExVatpr = VATrw.ExVatpr;
      goto LFindVATExVatpr;
    end;
  end;
LFindVATExVatpr:;  
  RETURN;
END;
//var Array string avatcodes,var Array string aInvOfficSerNos,var array val apercents,var array val aTxblVals,var array val aAmounts,var Integer 
//procedure SortVatCodesByInvNoArray(Array string aclass,Array LongInt aclasscucnt,LongInt vatcnt)
procedure SortVatCodesByInvNoArray(var Array string avatcodes,var Array string aInvOfficSerNos,var array date aExpDates,var array string avecodes,
								   var array string avenames,var array val apercents,var array val aTxblVals,var array val aAmounts,LongInt vatcnt)
begin
  string 255 vatcd,offsernr,vename;
  string 20 vecode;
  val prcnt,tblval,amnt;
  date expdate;
  Boolean changedf;
  LongInt i;
  
  changedf = true;
  while (changedf) begin
    changedf = false;
    for (i=0;i<vatcnt-1;i=i+1) begin
      if (aInvOfficSerNos[i]>aInvOfficSerNos[i+1]) then begin
        changedf = true;

        vatcd = avatcodes[i];
        offsernr = aInvOfficSerNos[i];
        expdate = aExpDates[i];
        vecode = avecodes[i];
        vename = avenames[i];
        prcnt = apercents[i];
        tblval = aTxblVals[i];
        amnt = aAmounts[i];
        avatcodes[i] = avatcodes[i+1];
        aInvOfficSerNos[i] = aInvOfficSerNos[i+1];
        aExpDates[i] = aExpDates[i+1];
        avecodes[i] = avecodes[i+1];
        avenames[i] = avenames[i+1];
        apercents[i] = apercents[i+1];
        aTxblVals[i] = aTxblVals[i+1];
        aAmounts[i] = aAmounts[i+1];
        avatcodes[i+1] = vatcd;
        aInvOfficSerNos[i+1] = offsernr;
        aExpDates[i+1] = expdate;
        avecodes[i+1] = vecode;
        avenames[i+1] = vename;
        apercents[i+1] = prcnt;
        aTxblVals[i+1] = tblval;
        aAmounts[i+1] = amnt;

      end;
    end;
  end;
 
  return;
end;

procedure AddToExpVATArray(string vatcode,string InvOfficSerNo,date expdate,string vecode,string vename,val rowsum,val rowvat,
						var Array string avatcodes,var Array string aInvOfficSerNos,var array date aExpDates,var array string avecodes,
						var array string avenames, var array val apercents,var array val aTxblVals,var array val aAmounts,var Integer avatcnt)
BEGIN
  Integer i;
  val vval,tax1val,taxVal;
  boolean vatexistf;
  
  vatexistf = false;
  if (blank(vatcode)) then begin
    goto LAddToExpVATArray;
  end;
  for (i=0;i<avatcnt;i=i+1) begin
    if (vatcode==avatcodes[i] and InvOfficSerNo==aInvOfficSerNos[i]) then begin
	  taxVal = (rowsum - rowvat);
	  aTxblVals[i] = aTxblVals[i] + taxVal;
	  aAmounts[i] = aAmounts[i] + rowvat;
      vatexistf = true;
    end;
  end;
  if (!vatexistf) then begin
      FindVATExVatpr(vatcode,vval);
	  avatcodes[avatcnt] = vatcode;
	  aInvOfficSerNos[avatcnt] = InvOfficSerNo;
	  aExpDates[avatcnt] = expdate;
	  avecodes[avatcnt] = vecode;
	  avenames[avatcnt] = vename;
	  apercents[avatcnt] = vval;

	  taxVal = (rowsum - rowvat);
	  aTxblVals[avatcnt] = taxVal;
	  aAmounts[avatcnt] = rowvat;
	  avatcnt = avatcnt + 1;
  end;
LAddToExpVATArray:;  
  RETURN;
END;

function string 2 addzerodt(string number)
begin
  string 2 res;
  res = number;
  if (len(res) == 1) then begin res = "0" & number; end;
  
  addzerodt = res;
  return;
end;

procedure iSAFHeaderStart(string xmlVerStr, integer selectedval,string orgnumber,date startDate,date endDate)
begin
  string 255 tstr;
  string 1 datatype;
  record CYBlock CYb;
  string 20 partno,mainOrgNo;
  
  BlockLoad(CYb);
  XMLLineOut("<Header>",1);
  XMLLineOut("<FileDescription>",2);
  //XMLTagOut("FileVersion","iSAF1.2",3);
  XMLTagOut("FileVersion",xmlVerStr,3);	//Laikinas
  tstr = DateToString(CurrentDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  tstr = tstr & CurrentTime;
  XMLTagOut("FileDateCreated",tstr,3);		//<FileDateCreated>2016-08-10T09:30:47Z</FileDateCreated>
  switch (selectedval) begin
    case 0: datatype = "F";
    case 1: datatype = "S";
    case 2: datatype = "P";
  end;
  if (orgnumber=="") then begin mainOrgNo = CYb.OrgNr; end else begin mainOrgNo = orgnumber; end;
  XMLTagOut("DataType",datatype,3);				//F - pilnas failas, P - gaunamu PVM s.f. registras, S - israsomu PVM s.f.registras
  XMLTagOut("SoftwareCompanyName","UAB Presme",3);
  XMLTagOut("SoftwareName","Standard ERP",3);
  XMLTagOut("SoftwareVersion","8.1",3);
  
  XMLTagOut("RegistrationNumber",mainOrgNo,3);
  XMLTagOut("NumberOfParts","1",3);				//Mokestinio laikotarpio rinkmenos daliu sk., jei rinkmena neskaidoma, nurodomas sk. 1
  //partno = startDate.year & addzerodt(startDate.month) & addzerodt(startDate.day) & addzerodt(endDate.day);
  partno = "1";
  switch (selectedval) begin
    case 1: partno = "SALES";
    case 2: partno = "PURCHASES";
    otherwise
  end;
  XMLTagOut("PartNumber",partno,3);				//mokestinio laikotarpio rinkmenos dalies unikalus identifikatorius
  XMLLineOut("<SelectionCriteria>",3);
  XMLTagOut("SelectionStartDate",DateToString(startDate,"YYYY-MM-DD"),4);	
  XMLTagOut("SelectionEndDate",DateToString(endDate,"YYYY-MM-DD"),4);	
  XMLLineOut("</SelectionCriteria>",3);
			
  return;
end;

procedure iSAFRepHeader(string xmlVerStr, integer selectedval,string orgnumber,date startDate,date endDate)
begin
  string 255 tstr;
  string 1 datatype;
  record CYBlock CYb;
  string 20 partno;
  integer colpos;
  string 20 mainOrgNo;
            
  colpos = 80;
  BlockLoad(CYb);
  tstr = DateToString(CurrentDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  tstr = tstr & CurrentTime;
  switch (selectedval) begin
    case 0: datatype = "F - " & USetStr(23871);		//"F - Pilnas failas"
    case 1: datatype = "S-" & USetStr(23872);		//"S-Iäraäomos PVM s.f."
    case 2: datatype = "P-" & USetStr(23873);		//P-Gaunamos PVM s.f.
  end;  
  partno = "1";
  if (orgnumber=="") then begin mainOrgNo = CYb.OrgNr; end else begin mainOrgNo = orgnumber; end;
  
  StartFormat(15);
  OutString(0,0,USetStr(23875),false); 	//"Rinkmenos versija:"
  OutString(colpos,0,USetStr(23874),false); 	//"Rinkmena sukurta:"
  OutString(4,0,USetStr(10111) & " " & USetStr(13835),false); //"Atask. periodas"
  EndFormat;
  Gray_Divider(0,250);
  StartFormat(25);
  OutString(0,0,xmlVerStr,false); 
  OutString(colpos,0,tstr,false); 
  OutString(4,0, DateToString(startDate,"YYYY-MM-DD") & ":" & DateToString(endDate,"YYYY-MM-DD"),false); 
  EndFormat;
  //Gray_Divider(0,450);
  StartFormat(15);
  OutString(0,0,USetStr(23876),false); 		//"P.¯. kðr˜jas:"
  OutString(colpos,0,USetStr(23877),false); 		//"P.¯. pavadinimas:"
  OutString(4,0,USetStr(23878),false);		//"P.¯. versija:"
  EndFormat;
  Gray_Divider(0,250);
  StartFormat(25);
  OutString(0,0,"UAB Presme",false); 
  OutString(colpos,0,"Standard ERP",false); 
  OutString(4,0,"8.1",false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(23879),false); 		//"Teikiam÷ duom.tipas:"
  OutString(colpos,0,USetStr(23880),false);		//"Dali÷ sk.:"
  OutString(4,0,USetStr(23881),false);		//"Registracijos kodas:"
  EndFormat;
  Gray_Divider(0,250);
  StartFormat(25);
  OutString(0,0,datatype,false); 
  OutString(colpos,0,"1",false); 
  OutString(4,0,mainOrgNo,false);
  EndFormat;
  //Black_Divider(380,460);
  return;
end;

function string 2 ISOCountryCode(string countrycd)
begin
  Record CountryVc Cntr;
  string 2 res;
  
  res = countrycd;
  Cntr.Code = countrycd;
  if ReadFirstMain(Cntr,1,true) then begin
  	if nonblank(Cntr.ISOCode) then begin
  	  res = Cntr.ISOCode;
  	end;
  end;

  ISOCountryCode = res;
  return;
end;

//Returns customer's VAT reg no.
function string 100 GetCstmrVATNo(string code,integer switchflag)
begin
  record CUVc CUr;
  string 100 res;
  
  CUr.Code = code;
  if ReadFirstMain(CUr,1,true) then begin 
    switch (switchflag) begin
      case 0 : res = CUr.VATNr;
      case 1 : res = CUr.RegNr1;
    end;
  end;
  if (res == "") then begin res = "ND"; end;
  GetCstmrVATNo = res;
  return;
end;

//Returns customer's company reg no.
function string 100 GetCstmrRegNo(string code,integer switchflag)
begin
  record CUVc CUr;
  string 100 res;
  
  CUr.Code = code;
  if ReadFirstMain(CUr,1,true) then begin 
    switch (switchflag) begin
      case 0 : res = CUr.RegNr1; 
      case 1 : res = CUr.VATNr;
    end;
  end;
  if (res == "") then begin res = "ND"; end;
  GetCstmrRegNo = res;
  return;
end;

//Returns customer's country
function string 2 GetCstmrCntry(string code)
begin
  record CUVc CUr;
  string 2 res,cntrystr;
  
  CUr.Code = code;
  if ReadFirstMain(CUr,1,true) then begin 
    cntrystr = StripCharacter(CUr.CountryCode," ");
    if (len(cntrystr)!=2) then begin
      if nonblank(cntrystr) then begin 
    	res = ISOCountryCode(cntrystr);
      end;
    end else begin
      res = cntrystr;
    end;
  end;
  //if (res == "") then begin res = "LT"; end;
  
  GetCstmrCntry = res;
  return;
end;

//Returns customer's name
function string 200 GetCstmrName(string code,boolean repf)
begin
  record CUVc CUr;
  string 200 res;
  
  CUr.Code = code;
  if ReadFirstMain(CUr,1,true) then begin res = ConvXMLSpecCharTest(CUr.Name,repf); end;
  if (res == "") then begin res = "ND"; end;
  GetCstmrName = res;
  return;
end;

//returns invoice type in iSAF manner
function string 2 GetiSAFInvType(integer invalidf,integer ivtype,string pdeal,integer ivvit)
begin   
  string 2 typestr,cdivstr;
  
  if (invalidf!=0) then begin 
	typestr = "AN";
  end else begin
	  switch (ivvit) begin
		case 1: cdivstr = "KS";	//IV
		case 2: cdivstr = "KS";	//VI	//2016.10.31:"DS"
	  end;
	  switch (ivtype) begin
		case 1: typestr = "SF";
		case 2: typestr = "SF";
		case 3: typestr = cdivstr;
	  end;
  end;
  GetiSAFInvType = typestr;
 return;
end;

procedure IVSums(record IVVc IVr,var val subtotal,var val vat)
begin
  val sum1,sum3,bval;

  if (IVr.InclVAT>0) then begin
	sum1 = IVr.Sum1-IVr.Sum3;
  end else begin
	sum1 = IVr.Sum1;
  end;
  sum3 = IVr.Sum3;
  if (sum3 == bval) then begin sum3 = 0; end; 
  subtotal = sum1;
  vat = sum3;
  subtotal = mulratetobase1(IVr.CurncyCode,Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  vat = mulratetobase1(IVr.CurncyCode,Sum3,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  
 return;
end;

//returns Purchase invoice data
procedure GetCreditedPInv(longint OrigSerNo,var longint creditedivno,var string invno,var date invdate)
begin
  record VIVc VIr,credVIr;
  date bd;
  
  invdate = bd;
  invno = "";  
  creditedivno = -1;
  VIr.SerNr = OrigSerNo;
  if ReadFirstMain(VIr,1,true) then begin 
    credVIr.SerNr = VIr.CredInv;
    if ReadFirstMain(credVIr,1,true) then begin
      creditedivno = credVIr.SerNr;
      invno = credVIr.InvoiceNr;
      if (invno=="") then begin invno = "(*)"; end;
      invdate = credVIr.InvDate;
    end;
  end;

  return;
end;

function string 20 SalesIVOfficNo(longint SerNo,string series)
begin
  record IVVc IVr;
  string 20 invno;
  
  resetloop(IVr);
  IVr.SerNr = SerNo;
  if ReadFirstMain(IVr,1,true) then begin 
  	invno = series & IVr.SerNr;
    if nonblank(IVr.OfficialSerNr) then begin
  	    invno = IVr.OfficialSerNr;
  	end;
  end;
  SalesIVOfficNo = invno;
  return;
end;

procedure CreditSInv(string series,longint SerNo,var string invno,var date invdate)
begin
  record IVVc IVr;

  IVr.SerNr = SerNo;
  if ReadFirstMain(IVr,1,true) then begin 
  	invno = SalesIVOfficNo(IVr.SerNr,series);
    invdate = IVr.InvDate;
  end;

  return;
end;

procedure GetCreditedSInv(Longint origivno, string series,var string invno,var date invdate)
begin
  record IVVc IVr;
  row IVVc IVrw;
  integer i,rwcnt;
  boolean crfoundf;
  date bd;
  
  invdate = bd;
  invno = "";
  IVr.SerNr = origivno;
  if ReadFirstMain(IVr,1,true)then begin
    rwcnt = MatRowCnt(IVr);
    crfoundf = false;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp == 3) and (IVrw.OrdRow>0) then begin
	    CreditSInv(series,IVrw.OrdRow,invno,invdate);
	    crfoundf = true;
      end;
    end;
    if (!crfoundf) then begin
      CreditSInv(series,IVr.CredInv,invno,invdate);
    end;
  end;
  return;
end;

procedure XMLRefTagOut(string invno,date invdate,integer level)
begin
  date bdt;
  
  if (nonblank(invno)) or (bdt!=invdate) then begin
  XMLLineOut("<Reference>",level);
  XMLTagOut("ReferenceNo",invno,level+1);
  XMLTagOut("ReferenceDate",DateToString(invdate,"YYYY-MM-DD"),level+1);
  XMLLineOut("</Reference>",level);
  end;
  return;
end;

procedure XMLCustSuppInfoOut(string contactidtag,string custcode, string name,
					   string vatno,string regno,string country,integer level)
begin
  XMLTagOut(contactidtag,custcode,level);
  XMLTagOut("VATRegistrationNumber",vatno,level);
  XMLTagOut("RegistrationNumber",regno,level);
  XMLTagOut("Country",country,level);
  XMLTagOut("Name",name,level);
  return;
end;

//Document check start

procedure CheckIV(Record RcVc RepSpec,record IVVc IVr,var boolean testf,boolean TrHs)
begin
  
  if (TrHs == false) then begin testf = false; end;    
  if (testf) then begin
	if (testf and IVr.Invalid <> 0) then begin testf = false; end;
	if (testf and IVr.OKFlag == 0) then begin testf = false; end;
	if (IVr.ExportFlag == 0 and RepSpec.flags[5] <> 1) then begin testf = false; end;
	if (IVr.ExportFlag == 1 and RepSpec.flags[6] <> 1) then begin testf = false; end;
	if (IVr.ExportFlag == 2 and RepSpec.flags[7] <> 1) then begin testf = false; end;
	if (IVr.ExportFlag == 3 and RepSpec.flags[9] <> 1) then begin testf = false; end;
	if (IVr.ExportFlag == 4 and RepSpec.flags[10] <> 1) then begin testf = false;end;
	if nonblank(RepSpec.f5) and SetInSet(IVr.PayDeal, RepSpec.f5) then begin testf = false; end;
  end;
  return;
end;

procedure CheckVI(Record RcVc RepSpec,record VIVc VIr,var boolean testf,boolean TrHs)
begin
  
  if (TrHs == false) then begin testf = false; end;    
  if (testf) then begin
    if (testf and VIr.Invalid <> 0) then begin testf = false; end;
    if (testf and VIr.OKFlag == 0) then begin testf = false; end;  
	if (VIr.ExportFlag == 0 and RepSpec.flags[5] <> 1) then begin testf = false; end;
	if (VIr.ExportFlag == 1 and RepSpec.flags[6] <> 1) then begin testf = false; end;
	if (VIr.ExportFlag == 2 and RepSpec.flags[7] <> 1) then begin testf = false; end;
	if (VIr.ExportFlag == 3 and RepSpec.flags[9] <> 1) then begin testf = false; end;
	if (VIr.ExportFlag == 4 and RepSpec.flags[10] <> 1) then begin testf = false;end;
	if nonblank(RepSpec.f5) and SetInSet(VIr.PayDeal, RepSpec.f5) then begin testf = false; end;
	if (UpperCase((StripCharacter(VIr.InvAddr4," "))) == "NEISAF") then begin testf = false; end;
  end;

  return;
end;

procedure CheckExp(Record RcVc RepSpec,record ExpVc Expr,var boolean testf)
begin

  if (testf and Expr.Invalid <> 0) then begin testf = false; end;
  if (testf and Expr.OKFlag == 0) then begin testf = false; end;
  if RepSpec.flags[1] == 1 then begin
    if (/* Expr.TransDate < RepSpec.sStartDate or */ Expr.TransDate > RepSpec.sEndDate) then begin
	  testf =  false;
    end;
  end;
  return;
end;  

procedure CheckExpRows(Record RcVc RepSpec,row ExpVc Exprw,var boolean testf)
begin
    record CUVc CUr;
    
    if (blank(Exprw.DocNr)) then begin testf = false; end;
	if (testf) then begin 
	  CUr.Code = Exprw.VECode;
	  if ReadFirstMain(CUr,1,true) then begin end;;
	  if (CUr.ExportFlag == 0 and RepSpec.flags[5] <> 1) then begin testf = false; end;
	  if (CUr.ExportFlag == 1 and RepSpec.flags[6] <> 1) then begin testf = false; end;
	  if (CUr.ExportFlag == 2 and RepSpec.flags[7] <> 1) then begin testf = false; end;
	  if (CUr.ExportFlag == 3 and RepSpec.flags[9] <> 1) then begin testf = false; end;        
	  if (CUr.ExportFlag == 4 and RepSpec.flags[10] <> 1) then begin testf = false;end;
	  if RepSpec.flags[1] == 0 then begin
		if Exprw.ExpDate < RepSpec.sStartDate or Exprw.ExpDate > RepSpec.sEndDate then begin
			testf =  false;
		end;
	  end;
	end;
  return;
end;

//Document check end

procedure GetSuppliersListExp(Record RcVc RepSpec,var array string vecode,var integer vecnt)
begin
  record ExpVc Expr;
  row ExpVc Exprw;
  Boolean testf,existf,TrHS;
  Integer i,rwcnt;
  
  TrHs = true;
  testf = true;
  Expr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate", Expr, 1, TrHs)) begin
	  if RepSpec.flags[1] == 1 then begin 
		if (Expr.TransDate > RepSpec.sEndDate) then begin
			TrHs = false;
		end;
	  end;
    //testf = true;
    CheckExp(RepSpec,Expr,testf);
    if (TrHs and testf) then begin
	  rwcnt = MatRowCnt(Expr);
	  for (i=0;i<rwcnt;i=i+1) begin
		MatRowGet(Expr,i,Exprw);
		CheckExpRows(RepSpec,Exprw,testf);
		if (testf) then begin            
		  existf = CompareArrayVal(Exprw.VECode,vecode,vecnt);
		  if (!existf) then begin
			vecode[vecnt] = Exprw.VECode;
			vecnt = vecnt + 1;
		  end;	
		end;
	  end;         
    end;
  end;
  
  return;
end;
  
procedure GetCustommersList(Record RcVc RepSpec,var array string cucode, var integer cnt)
begin
  record IVVc IVr;
  boolean TrHs,testf,existf;
  string 10 ckey;
  
  // - Sorting key
  if (RepSpec.flags[1]==0) then begin
    ckey = "InvDate";
    IVr.InvDate = RepSpec.sStartDate;
  end;
  if (RepSpec.flags[1]==1) then begin
    ckey = "TransDate";
    IVr.TransDate = RepSpec.sStartDate;
  end;
  
  TrHs = true;
  while (LoopKey(ckey,IVr,1,TrHs)) begin
  	testf = true;
	if ((RepSpec.flags[1] == 0) and (IVr.InvDate > RepSpec.sEndDate)) then begin
	  TrHs = false;
	end;
	if ((RepSpec.flags[1] == 1) and (IVr.TransDate > RepSpec.sEndDate)) then begin
	  TrHs = false;
	end;  
	CheckIV(RepSpec,IVr,testf,TrHs);
    if (testf) then begin
      existf = CompareArrayVal(IVr.CustCode,cucode,cnt);
      if (!existf) then begin
        cucode[cnt] = IVr.CustCode;
        cnt = cnt + 1;
      end;
    end;
  end;

  return;
end;

procedure GetSuppliersList(Record RcVc RepSpec,var array string vecode, var integer cnt)
begin
  record VIVc VIr;
  boolean TrHs,testf,existf;
  string 10 ckey;
  
  if (RepSpec.flags[1]==0) then begin
    ckey = "InvDate";
    VIr.InvDate = RepSpec.sStartDate;
  end;
  if (RepSpec.flags[1]==1) then begin
    ckey = "TransDate";
    VIr.TransDate = RepSpec.sStartDate;
  end;

  Trhs = true;
  while (LoopKey(ckey, VIr, 1, TrHS)) begin
    testf = true;
	if ((RepSpec.flags[1] == 0) and (VIr.InvDate > RepSpec.sEndDate)) then begin
		TrHs = false;
	end;
	if ((RepSpec.flags[1] == 1) and (VIr.TransDate > RepSpec.sEndDate)) then begin
		TrHs = false;
	end;
    CheckVI(RepSpec,VIr,testf,TrHs);
    if (testf) then begin
      existf = CompareArrayVal(VIr.VECode,vecode,cnt);
      if (!existf) then begin
        vecode[cnt] = VIr.VECode;
        cnt = cnt + 1;
      end;	
	end; 
  end;
  if (RepSpec.flags[11]!=0) then begin
    GetSuppliersListExp(RepSpec,vecode,cnt);
  end;  
  return;
end;

procedure iSAFHeaderEnd()
begin
  XMLLineOut("</FileDescription>",2);
  XMLLineOut("</Header>",1);
  return;
end;

procedure iSAFMasterFilesStart(record RcVc RepSpec,var integer cucnt,var integer vecnt)
begin
 array string 20 aVecode,aCucode;
 integer i,switchf;
 record CUVc CUr;
 record ExpVc Expr;
 row ExpVc Exprw;
 
 XMLLineOut("<MasterFiles>",1);
 switchf = RepSpec.flags[8];
 if (RepSpec.flags[0]==0 or RepSpec.flags[0]==1) then begin
   GetCustommersList(RepSpec,aCucode,cucnt);
   if (cucnt>0) then begin
	   XMLLineOut("<Customers>",2);
	   for (i=0;i<cucnt;i=i+1) begin
		 resetLoop(CUr);
		 CUr.Code = aCucode[i];
		 if (ReadFirstMain(CUr,1,true)) then begin 
		   XMLLineOut("<Customer>",3);
		   XMLCustSuppInfoOut("CustomerID",CUr.Code, ConvertXMLSpecCharsInStr(CUr.Name),
				   GetCstmrVATNo(CUr.Code,switchf),GetCstmrRegNo(CUr.Code,switchf),GetCstmrCntry(CUr.Code),4);
		   XMLLineOut("</Customer>",3);
		 end;
	   end;
	   XMLLineOut("</Customers>",2);
   end;
 end;
 if (RepSpec.flags[0]==0 or RepSpec.flags[0]==2) then begin
   GetSuppliersList(RepSpec,aVecode,vecnt);
   if (vecnt>0) then begin
	   XMLLineOut("<Suppliers>",2);
	   for (i=0;i<vecnt;i=i+1) begin
		 resetLoop(CUr);
		 CUr.Code = aVecode[i];
		 if (ReadFirstMain(CUr,1,true)) then begin 
		   XMLLineOut("<Supplier>",3);
		   XMLCustSuppInfoOut("SupplierID",CUr.Code, ConvertXMLSpecCharsInStr(CUr.Name),
				   GetCstmrVATNo(CUr.Code,switchf),GetCstmrRegNo(CUr.Code,switchf),GetCstmrCntry(CUr.Code),4);
		   XMLLineOut("</Supplier>",3)
		 end;
	   end;
	   XMLLineOut("</Suppliers>",2);
   end;
 end;
 return;
end;

procedure NewPart(string tstr,boolean subpartf,integer divlength)
begin
  integer startpos;
  
  startpos=0;
  if (subpartf==false) then begin 
  startpos=70; 
  end;
  StartFormat(15);
  OutString(startpos,0,tstr,false); 
  EndFormat;
  Black_Divider(0,divlength);  
  StartFormat(2);
  EndFormat;
  return;
end;

procedure CUInfoRepRow(integer showcustrw,string id,string name, string vatno,string regno, string country,boolean headerf)
begin
   if (showcustrw==1) then begin
	   StartFormat(15);
	   if (headerf) then begin
		  OutString(0,0,id,false);
	   end else begin
		  OutStringID(0,"DblCUVc",id,false,id);
	   end;
	   OutString(2,0,name,false);
	   OutString(6,0,vatno,false);
	   OutString(8,0,regno,false);
	   OutString(420,0,country,false);
	   EndFormat;
   end;
 return;
end;

procedure InvoiceRep(integer showcustrw,string psflag, string series,string invoiceNo,date invDate,string ivtypestr,date vatpointDate,date transDate,
					 longint origIVno,string cucode,string cuname, boolean headerf)
begin
  string 15 oficserno,crinvnostr;
  string 35 credivdata;
  string 20 dblstr;
  string 20 conttypestr;
  longint crdtdivno;
  date crinvdate;
  
    if (psflag == "S") then begin 
      oficserno = SalesIVOfficNo(origIVno,series); 
      dblstr = "DblIVVc"; 
      conttypestr = USetStr(6741);
    end;
    if (psflag == "P") then begin 
      oficserno = invoiceNo; 
      dblstr = "DblVIVc"; 
      conttypestr = USetStr(8424);
    end;
    if (psflag == "Ex") then begin 
      oficserno = invoiceNo; 
      dblstr = "DblExpVc"; 
      conttypestr = USetStr(8424);    	
    end;
    if (oficserno=="") then begin oficserno = "(*)"; end;
    if (ivtypestr == "KS") or (ivtypestr == "DS") then begin
      switch (psflag) begin
        case "S": GetCreditedSInv(origIVno,series,crinvnostr,crinvdate);
        case "P": GetCreditedPInv(origIVno,crdtdivno,crinvnostr,crinvdate);
        case "Ex":
      end;
    end;
  	if (nonblank(crinvnostr)) then begin
      credivdata = crinvnostr & ", " & DateToString(crinvdate,"YYYY-MM-DD");
    end;

  if (headerf) then begin
  	StartFormat(15);
    OutString(0,0,USetStr(17202),false);		//Faktðros nr.
    OutString(2,0,USetStr(13890),false);			//Fakt.data
    OutString(3,0,USetStr(23882),false);		//"Prek./pasl.data"
    OutString(4,0,USetStr(23883),false);		//"Reg.apsk.data"
    OutString(5,0,USetStr(16482),false);				//Tipas
    OutString(6,0,conttypestr,false);
    OutString(7,0,USetStr(16903),false);			//Pavadinimas
    OutString(1,0,USetStr(13860) & " (" & USetStr(16027) & ")",true);
    EndFormat;
    CUInfoRepRow(showcustrw,conttypestr,USetStr(6742),USetStr(18074),USetStr(10385),USetStr(16707),true);
    Gray_Divider(0,1);
  end;
    StartFormat(15);
    OutStringID(0,dblstr,oficserno,false,origIVno);
    OutString(2,0,invDate,false);
    OutString(3,0,vatpointDate,false);
    OutString(4,0,transDate,false);
    OutString(5,0,ivtypestr,false);
    OutStringID(6,"DblCUVc",cucode,false,cucode);
    OutString(7,0,cuname,false);
    OutStringID(1,dblstr,credivdata,true,crdtdivno);    
    EndFormat;
  
  return;
end;

procedure InvoiceVATRowsRep(val txblVal,string vatcode,val percent,val amount,boolean headerf)
begin
  if (headerf) then begin
    Gray_Divider(0,4);
  end;
  StartFormat(15);
  if (headerf) then begin
    OutString(0,0,USetStr(23884),false);			//"Mokes‹.kd."
    OutString(2,0,USetStr(23885),true);				//"M.tarif."
    OutString(3,0,USetStr(23886),true);				//"Apmokest.vert˜"
    OutString(4,0,USetStr(10663),true);				//PVM suma
  end else begin
    OutString(0,0,vatcode,false);
    OutVal(2,0,percent,M4UVal,true);
    OutVal(3,0,txblVal,M4Val,true);
    OutVal(4,0,amount,M4Val,true);
  end;
  EndFormat;
  if (headerf) then begin
    Gray_Divider(0,4);
  end;
  return;
end;

procedure TotalsRowRep(string Col1str,string Col2str,string Col3str)
begin
  StartFormat(15);
  OutString(330,0,Col1str,false);
  OutString(430,0,Col2str,true);
  OutString(1,0,Col3str,true);
  EndFormat;
  return;
end;

procedure iSAFRepMasterFiles(record RcVc RepSpec,var integer cucnt,var integer vecnt)
begin
 array string 20 aVecode,aCucode;
 integer i;
 record CUVc CUr;
 record ExpVc Expr;
 row ExpVc Exprw;
 integer switchf;
 
 switchf = RepSpec.flags[8];
 if (RepSpec.flags[0]==0 or RepSpec.flags[0]==1) then begin
   GetCustommersList(RepSpec,aCucode,cucnt);
   if (cucnt>0) then begin
   	   NewPart("2.1. " & USetStr(1087) & " :",true,40);			//Pirkejai
	   Gray_Divider(0,1);
	   CUInfoRepRow(1,USetStr(6741),USetStr(6742),USetStr(18074),USetStr(10385),USetStr(16707),true);
	   Gray_Divider(0,1);
	   for (i=0;i<cucnt;i=i+1) begin
		 resetLoop(CUr);
		 CUr.Code = aCucode[i];
		 if (ReadFirstMain(CUr,1,true)) then begin 
		   CUInfoRepRow(1,CUr.Code,CUr.Name,GetCstmrVATNo(CUr.Code,switchf),GetCstmrRegNo(CUr.Code,switchf),GetCstmrCntry(CUr.Code),false);
		 end;
	   end;
	   Gray_Divider(0,1);
   end;
 end;
 if (RepSpec.flags[0]==0 or RepSpec.flags[0]==2) then begin
   GetSuppliersList(RepSpec,aVecode,vecnt);
   if (vecnt>0) then begin
	   StartFormat(15);
	   EndFormat;
	   NewPart("2.2. " & USetStr(1213) & ":",true,40);
	   Gray_Divider(0,1);
	   CUInfoRepRow(1,USetStr(8424),USetStr(6742),USetStr(18074),USetStr(10385),USetStr(16707),true);
	   Gray_Divider(0,1);
	   for (i=0;i<vecnt;i=i+1) begin
		 resetLoop(CUr);
		 CUr.Code = aVecode[i];
		 if (ReadFirstMain(CUr,1,true)) then begin 
		   CUInfoRepRow(1,CUr.Code,CUr.Name,GetCstmrVATNo(CUr.Code,switchf),GetCstmrRegNo(CUr.Code,switchf),GetCstmrCntry(CUr.Code),false);
		 end;
	   end;
	   Gray_Divider(0,1);
   end;
 end;
 return;
end;

procedure iSAFExpences(record RcVc RepSpec,var record SMVc TotValr,var boolean invheaderf,boolean repf,var integer invcnt)
begin   
  record ExpVc Expr;
  record CUVc CUr;
  val subtotal, vat;
  Boolean testf;
  boolean skipf,printendf;
  boolean Trhs;
  Integer i,rwcnt;
  row ExpVc Exprw;
  Array string 10 avatcodes,aInvOfficSerNos;
  Array string 20 avecode;
  Array string 100 avename;
  array val apercents,aTxblVals,aAmounts;
  Array date aExpDates;
  Integer vatcnt;
  date invdate,vatdate,regdate;
  string 100 oldInvNo;
  integer switchf;
  val sumb1,vatb1;
  
  switchf = RepSpec.flags[8];
  Trhs = false;
  if (RepSpec.flags[11]!=0) then begin Trhs = true; end;
  Expr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate", Expr, 1, TrHS)) begin
  	  
    testf = true;
    CheckExp(RepSpec,Expr,testf);
    if (TrHs and testf) then begin
	  rwcnt = MatRowCnt(Expr);
	  for (i=0;i<rwcnt;i=i+1) begin
		MatRowGet(Expr,i,Exprw);
		testf = true;
		subtotal = blankval;
		vat = blankval;        
		CheckExpRows(RepSpec,Exprw,testf);
		if (testf) then begin
		  sumb1 = MulRateToBase1(Expr.CurncyCode,Exprw.Sum,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
		  vatb1 = MulRateToBase1(Expr.CurncyCode,Exprw.VATSum,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
		  AddToExpVATArray(Exprw.VATCode,Exprw.DocNr,Exprw.ExpDate,Exprw.VECode,Exprw.VEName,sumb1,vatb1,avatcodes,aInvOfficSerNos,aExpDates,avecode,avename,apercents,aTxblVals,aAmounts,vatcnt);
	  	  SortVatCodesByInvNoArray(avatcodes,aInvOfficSerNos,aExpDates,avecode,avename,apercents,aTxblVals,aAmounts,vatcnt);
		  //subtotal = Exprw.Sum - Exprw.VATSum;
		  //vat = Exprw.VATSum;
		  //subtotal = MulRateToBase1(Expr.CurncyCode,subtotal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
		  //vat = MulRateToBase1(Expr.CurncyCode,vat,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);        
		end;
	  end;
	  printendf = false;
	  for (i=0;i<vatcnt;i=i+1) begin
		if (printendf) and (oldInvNo!=aInvOfficSerNos[i]) then begin
		  if (repf==false) then begin
	      XMLLineOut("</DocumentTotals>",4);
		  XMLLineOut("</Invoice>",3);
		  end;
		  printendf = false;
		end;
	    if (oldInvNo!=aInvOfficSerNos[i]) then begin 
	      skipf = false; 
	      oldInvNo = aInvOfficSerNos[i];
	    end;
	    if (i==0) or (!skipf) then begin
		  printendf = true;
	  	  invdate = aExpDates[i];
      	  vatdate = Expr.TransDate;
      	  regdate = Expr.TransDate;
      	  //if (RepSpec.flags[1] == 0) then begin regdate = aExpDates[i]; end;		//rusiuoti pagal fakturos data
      	  if (repf) then begin
      	    Gray_Divider(0,1);
      	    InvoiceRep(RepSpec.flags[21],"Ex","",aInvOfficSerNos[i],invdate,"SF",vatdate,
      	  	 	     regdate,Expr.SerNr,avecode[i],GetCstmrName(avecode[i],repf),invheaderf);
      	  	invheaderf = false;
		    CUInfoRepRow(RepSpec.flags[21],avecode[i],GetCstmrName(avecode[i],repf),GetCstmrVATNo(avecode[i],switchf),
		    		     GetCstmrRegNo(avecode[i],switchf),GetCstmrCntry(avecode[i]),false);
			InvoiceVATRowsRep(0,"",0,0,true);
	      end else begin
			  XMLLineOut("<Invoice>",3);  
			  XMLTagOut("InvoiceNo",aInvOfficSerNos[i],4);
			  XMLLineOut("<SupplierInfo>",4);
			  XMLCustSuppInfoOut("SupplierID",avecode[i], GetCstmrName(avecode[i],repf),GetCstmrVATNo(avecode[i],switchf),
						   		 GetCstmrRegNo(avecode[i],switchf),GetCstmrCntry(avecode[i]),5);
			  XMLLineOut("</SupplierInfo>",4);
			  //invdate = Expr.TransDate;
			  XMLTagOut("InvoiceDate",DateToString(invdate,"YYYY-MM-DD"),4);
			  //ivtypestr = GetiSAFInvType(VIr.Invalid,VIr.InvType,VIr.PayDeal);
			  XMLTagOut("InvoiceType","SF",4);
			  XMLTagOut("SpecialTaxation","",4);	//"T" jei taikoma "pinigu apskaitos sistema"
			  XMLLineOut("<References>",4);
			  XMLLineOut("</References>",4);
			  XMLInclNullTagOut("VATPointDate",DateToString(vatdate,"YYYY-MM-DD"),4);
			  XMLTagOut("RegistrationAccountDate",DateToString(regdate,"YYYY-MM-DD"),4);
			  XMLLineOut("<DocumentTotals>",4);
		  end;
		  invcnt = invcnt + 1;
		end;
		if (repf) then begin
		  AddTotalsVATArray(TotValr,avatcodes[i],aTxblVals[i],aAmounts[i]);
		  InvoiceVATRowsRep(aTxblVals[i],avatcodes[i],apercents[i],aAmounts[i],false);
		end else begin
	      XMLLineOut("<DocumentTotal>",5);
	  	  XMLTagOut("TaxableValue",ValToString(aTxblVals[i],M4Val,"",".",0),6);
	  	  XMLTagOut("TaxCode",avatcodes[i],6);
	  	  XMLInclNullTagOut("TaxPercentage",ValToString(apercents[i],M4Val,"",".",0),6);
	  	  XMLTagOut("Amount",ValToString(aAmounts[i],M4Val,"",".",0),6);
	      XMLLineOut("</DocumentTotal>",5);
	    end;
		skipf = true; 
		//logtext(0, "avatcodes[i]:" & avatcodes[i] & ",aInvOfficSerNos[i]:" & aInvOfficSerNos[i] & ",aExpDates:" & aExpDates[i] & ", apercents[i]:" & apercents[i] & ",aTxblVals[i]:" & aTxblVals[i] & "aAmounts[i]:" & aAmounts[i])
      end;
      
      if printendf then begin
        if (repf==false) then begin
		XMLLineOut("</DocumentTotals>",4);
	    XMLLineOut("</Invoice>",3);
	    end;
      end;
    EmptyStrArray(avatcodes,vatcnt);
	EmptyStrArray(aInvOfficSerNos,vatcnt);
	EmptyValArray(apercents,vatcnt);
	EmptyValArray(aTxblVals,vatcnt);
	EmptyValArray(aAmounts,vatcnt);
	vatcnt = 0;
    end;
  end;
 return;
end;

procedure iSAFPurchInvoices(record RcVc RepSpec,var record SMVc TotValr,boolean repf,var integer invcnt)
begin          

  record VIVc VIr;
  row VIVc VIrw;
  string 20 ckey;
  boolean testf, TrHs,crfoundf;
  string 2 ivtypestr;
  string 50 invno;
  date crinvdate;
  string 200 cuname;
  date vatpointdate;
  integer i,rwcnt,switchf;
  Array string 10 avatcodes;
  array val apercents,aTxblVals,aAmounts;
  Integer vatcnt;
  boolean invheaderf,credf;
  longint crdtdivno;
  val sumb1,recalcvat;
  val sign;
    
  if (RepSpec.flags[1]==0) then begin
    ckey = "InvDate";
    VIr.InvDate = RepSpec.sStartDate;
  end;
  if (RepSpec.flags[1]==1) then begin
    ckey = "TransDate";
    VIr.TransDate = RepSpec.sStartDate;
  end;
  
  invcnt = 0;
  switchf = RepSpec.flags[8];
  invheaderf = true;
  Trhs = true;
  while (LoopKey(ckey, VIr, 1, TrHS)) begin
	if ((RepSpec.flags[1] == 0) and (VIr.InvDate > RepSpec.sEndDate)) then begin
		TrHs = false;
	end;
	if ((RepSpec.flags[1] == 1) and (VIr.TransDate > RepSpec.sEndDate)) then begin
		TrHs = false;
	end;
    testf = true;
    CheckVI(RepSpec,VIr,testf,TrHs);
    if (TrHs and testf) then begin
      credf = false;
      sign = 1;
      if (VIr.VEName!="") then begin
      	  cuname = ConvXMLSpecCharTest(VIr.VEName,repf);
      end else begin
        cuname = GetCstmrName(VIr.VECode,repf);
      end;
      ivtypestr = GetiSAFInvType(VIr.Invalid,VIr.InvType,VIr.PayDeal,2);
      if (ivtypestr == "KS") or (ivtypestr == "DS") then begin
        credf = true;
        sign = -1;
      end;
      vatpointdate = VIr.RcvDate;
      //if blankdate(vatpointdate) then begin vatpointdate = VIr.TransDate; end;
      if (repf) then begin
      	  Gray_Divider(0,1);
      	  InvoiceRep(RepSpec.flags[21],"P","",VIr.InvoiceNr,VIr.InvDate,ivtypestr,vatpointdate,
      	  	 	     VIr.TransDate,VIr.SerNr,VIr.VECode,cuname,invheaderf);
		  CUInfoRepRow(RepSpec.flags[21],VIr.VECode,cuname, GetCstmrVATNo(VIr.VECode,switchf),
		    		     GetCstmrRegNo(VIr.VECode,switchf),GetCstmrCntry(VIr.VECode),false);
		  invheaderf = false;
      end else begin
		  XMLLineOut("<Invoice>",3);  
		  XMLTagOut("InvoiceNo",VIr.InvoiceNr,4);
		  XMLLineOut("<SupplierInfo>",4);
		  XMLCustSuppInfoOut("SupplierID",VIr.VECode, cuname,GetCstmrVATNo(VIr.VECode,switchf),
					   	     GetCstmrRegNo(VIr.VECode,switchf),GetCstmrCntry(VIr.VECode),5);
		  XMLLineOut("</SupplierInfo>",4);
		  XMLTagOut("InvoiceDate",DateToString(VIr.InvDate,"YYYY-MM-DD"),4);
		  XMLTagOut("InvoiceType",ivtypestr,4);
		  XMLTagOut("SpecialTaxation","",4);	//"T" jei taikoma "pinigu apskaitos sistema"
		  XMLLineOut("<References>",4);
		  if (ivtypestr == "KS") or (ivtypestr == "DS") then begin
			GetCreditedPInv(VIr.SerNr,crdtdivno,invno,crinvdate);
			XMLRefTagOut(invno,crinvdate,5);
		  end;
		  XMLLineOut("</References>",4);
		  XMLInclNullTagOut("VATPointDate",DateToString(vatpointdate,"YYYY-MM-DD"),4);
		  XMLTagOut("RegistrationAccountDate",DateToString(VIr.TransDate,"YYYY-MM-DD"),4);
      end;
      EmptyStrArray(avatcodes,vatcnt);
      EmptyValArray(apercents,vatcnt);
      EmptyValArray(aTxblVals,vatcnt);
      EmptyValArray(aAmounts,vatcnt);
      vatcnt = 0;
      for (i=0;i<MatrowCnt(VIr);i=i+1) begin
      	MatRowGet(VIr,i,VIrw);
      	if nonblank(VIrw.VATCode) then begin
    	  sumb1 = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
    	  sumb1 = sign * sumb1;
          AddToVATArray(VIrw.VATCode,sumb1,VIr.TransDate,0,VIr.NoTAXonVAT,
        			    avatcodes,apercents,aTxblVals,aAmounts,vatcnt);
        end;
	  end;
	  if (repf) then begin
	  	  InvoiceVATRowsRep(0,"",0,0,true);
	  	  for (i=0;i<vatcnt;i=i+1) begin
	  	  	 recalcvat = FindVAT(avatcodes[i],aTxblVals[i],0,VIr.NoTAXonVAT);
	  	  	 AddTotalsVATArray(TotValr,avatcodes[i],aTxblVals[i],recalcvat);
			 InvoiceVATRowsRep(aTxblVals[i],avatcodes[i],apercents[i],recalcvat,false);
	      end;
	  end else begin
	  	  XMLLineOut("<DocumentTotals>",4);
		  for (i=0;i<vatcnt;i=i+1) begin
		  	 recalcvat = FindVAT(avatcodes[i],aTxblVals[i],0,VIr.NoTAXonVAT);
			 XMLLineOut("<DocumentTotal>",5);
			 XMLTagOut("TaxableValue",ValToString(aTxblVals[i], M4Val, "", ".", 0),6);
			 XMLTagOut("TaxCode",avatcodes[i],6);
			 XMLInclNullTagOut("TaxPercentage",ValToString(apercents[i], M4Val, "", ".", 0),6);
			 XMLTagOut("Amount",ValToString(recalcvat, M4Val, "", ".", 0),6);
			 XMLLineOut("</DocumentTotal>",5);
		  end;
		  XMLLineOut("</DocumentTotals>",4);
		  XMLLineOut("</Invoice>",3);
      end;
      invcnt = invcnt + 1;
    end;
  end; 
  if (RepSpec.flags[11]!=0) then begin
  	  iSAFExpences(RepSpec,TotValr,invheaderf,repf,invcnt);
  end;
  
 return;
end;

procedure iSAFSalesInvoices(record RcVc RepSpec,var record SMVc TotValr,boolean repf,var integer invcnt)
begin
  record ExpVc Expr;
  record IVVc IVr;
  row IVVc IVrw;
  record CUVc CUr;
  string 20 ckey,invoiceNo;
  boolean testf, TrHs;
  string 2 ivtypestr;
  string 50 invno;
  string 200 cuname;
  date crinvdate;
  date vatpointdate;
  integer i,rwcnt,kk,kkrwcnt,switchf;
  Array string 10 avatcodes;
  array val apercents,aTxblVals,aAmounts;
  Integer vatcnt;
  VAL taxVal,amnt;
  boolean invheaderf,credf;
  val sumb1,sign;
   
  if (RepSpec.flags[1]==0) then begin
    ckey = "InvDate";
    IVr.InvDate = RepSpec.sStartDate;
  end;
  if (RepSpec.flags[1]==1) then begin
    ckey = "TransDate";
    IVr.TransDate = RepSpec.sStartDate;
  end;
  switchf = RepSpec.flags[8];
  invcnt = 0;
  invheaderf = true;
  Trhs = true;
  while (LoopKey(ckey, IVr, 1, TrHS)) begin
	if ((RepSpec.flags[1] == 0) and (IVr.InvDate > RepSpec.sEndDate)) then begin
	  TrHs = false;
	end;
	if ((RepSpec.flags[1] == 1) and (IVr.TransDate > RepSpec.sEndDate)) then begin
	  TrHs = false;
	end;  
    testf = true;
    CheckIV(RepSpec,IVr,testf,TrHs);
    if (TrHs and testf) then begin
      credf = false;
      sign = 1;
      invoiceNo = SalesIVOfficNo(IVr.SerNr,RepSpec.f4);
  	  ivtypestr = GetiSAFInvType(IVr.Invalid,IVr.InvType,IVr.PayDeal,1);
      if (ivtypestr == "KS") or (ivtypestr == "DS") then begin
        credf = true;
        sign = -1;
      end;
	  if (IVr.Addr0!="") then begin
		  cuname = ConvXMLSpecCharTest(IVr.Addr0,repf);
	  end else begin
		cuname = GetCstmrName(IVr.CustCode,repf);
	  end;
	  vatpointdate = IVr.ServiceDelDate;
	  //if blankdate(vatpointdate) then begin vatpointdate = IVr.InvDate; end;
      if (repf) then begin
      	  Gray_Divider(0,1);
      	  InvoiceRep(RepSpec.flags[21],"S",RepSpec.f4,invoiceNo,IVr.InvDate,ivtypestr,vatpointdate,
      	  	 	     IVr.TransDate,IVr.SerNr,IVr.CustCode,cuname,invheaderf);
		  CUInfoRepRow(RepSpec.flags[21],IVr.CustCode,cuname, GetCstmrVATNo(IVr.CustCode,switchf),
		    		     GetCstmrRegNo(IVr.CustCode,switchf),GetCstmrCntry(IVr.CustCode),false);
		  invheaderf = false;
      end else begin
		  XMLLineOut("<Invoice>",3);  
		  XMLTagOut("InvoiceNo",invoiceNo,4);
		  XMLLineOut("<CustomerInfo>",4);
		  XMLCustSuppInfoOut("CustomerID",IVr.CustCode, cuname,GetCstmrVATNo(IVr.CustCode,switchf),
		  	  				 GetCstmrRegNo(IVr.CustCode,switchf),GetCstmrCntry(IVr.CustCode),5);
		  XMLLineOut("</CustomerInfo>",4);
		  XMLTagOut("InvoiceDate",DateToString(IVr.TransDate,"YYYY-MM-DD"),4);	//??
		  XMLTagOut("InvoiceType",ivtypestr,4);
		  XMLTagOut("SpecialTaxation","",4);	//"T" jei taikoma "pinigu apskaitos sistema"
		  XMLLineOut("<References>",4);
		  if (ivtypestr == "KS") or (ivtypestr == "DS") then begin
			GetCreditedSInv(IVr.SerNr,RepSpec.f4,invno,crinvdate);
			XMLRefTagOut(invno,crinvdate,5);
		  end;
		  XMLLineOut("</References>",4);
		  XMLInclNullTagOut("VATPointDate",DateToString(vatpointdate,"YYYY-MM-DD"),4);  //Pasl. prist. data
      end;
      EmptyStrArray(avatcodes,vatcnt);
      EmptyValArray(apercents,vatcnt);
      EmptyValArray(aTxblVals,vatcnt);
      EmptyValArray(aAmounts,vatcnt);
      vatcnt = 0;
      for (i=0;i<MatrowCnt(IVr);i=i+1) begin
      	MatRowGet(IVr,i,IVrw);
      	if nonblank(IVrw.VATCode) then begin
    	  sumb1 = MulRateToBase1(IVr.CurncyCode,IVrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    	  sumb1 = sign * sumb1;
          AddToVATArray(IVrw.VATCode,sumb1,IVr.TransDate,IVr.InclVAT,IVr.NoTAXonVAT,
        			    avatcodes,apercents,aTxblVals,aAmounts,vatcnt);
        end;
	  end;
	  if (repf==false) then begin
	    XMLLineOut("<DocumentTotals>",4);
	  end;
	  taxVal=0; amnt=0;
	  if (vatcnt>1) then begin
	  	if (repf) then begin
			InvoiceVATRowsRep(0,"",0,0,true);
			for (i=0;i<vatcnt;i=i+1) begin
			  AddTotalsVATArray(TotValr,avatcodes[i],aTxblVals[i],FindVAT(avatcodes[i],aTxblVals[i],IVr.InclVAT,IVr.NoTAXonVAT));
			  InvoiceVATRowsRep(aTxblVals[i],avatcodes[i],apercents[i],FindVAT(avatcodes[i],aTxblVals[i],IVr.InclVAT,IVr.NoTAXonVAT),false);
			end;
	  	end else begin
			for (i=0;i<vatcnt;i=i+1) begin
			  XMLLineOut("<DocumentTotal>",5);
			  XMLTagOut("TaxableValue",ValToString(aTxblVals[i], M4Val, "", ".", 0),6);
			  XMLTagOut("TaxCode",avatcodes[i],6);
			  XMLInclNullTagOut("TaxPercentage",ValToString(apercents[i], M4Val, "", ".", 0),6);
			  XMLTagOut("Amount",ValToString(FindVAT(avatcodes[i],aTxblVals[i],IVr.InclVAT,IVr.NoTAXonVAT), M4Val, "", ".", 0),6);
			  //vatpointdate = IVr.ServiceDelDate;
			  //if blankdate(vatpointdate) then begin vatpointdate = IVr.InvDate; end;
			  XMLInclNullTagOut("VATPointDate2",DateToString(vatpointdate,"YYYY-MM-DD"),6);
			  XMLLineOut("</DocumentTotal>",5);     
			end;
	    end;
	  end else begin
	     IVSums(IVr,taxVal,amnt);
	     taxVal = sign * taxVal;
	     amnt = sign * amnt;
    	 if (repf) then begin
	  	   InvoiceVATRowsRep(0,"",0,0,true);
	   	   AddTotalsVATArray(TotValr,avatcodes[0],taxVal,amnt);
		   InvoiceVATRowsRep(taxVal,avatcodes[0],apercents[0],amnt,false);
    	 end else begin
	  	   XMLLineOut("<DocumentTotal>",5);
	  	   XMLTagOut("TaxableValue",ValToString(taxVal, M4Val, "", ".", 0),6);
	  	   XMLTagOut("TaxCode",avatcodes[0],6);
	  	   XMLInclNullTagOut("TaxPercentage",ValToString(apercents[0], M4Val, "", ".", 0),6);
	  	   XMLTagOut("Amount",ValToString(amnt, M4Val, "", ".", 0),6);
	  	   //vatpointdate = IVr.ServiceDelDate;
           //if blankdate(vatpointdate) then begin vatpointdate = IVr.InvDate; end;
	  	   XMLInclNullTagOut("VATPointDate2",DateToString(vatpointdate,"YYYY-MM-DD"),6);
	       XMLLineOut("</DocumentTotal>",5);
	     end;
	  end;
	  if (repf==false) then begin
  	    XMLLineOut("</DocumentTotals>",4);
        XMLLineOut("</Invoice>",3);
      end;
      invcnt = invcnt+1;
    end;
  end;
  
 return;
end;

procedure iSAFMasterFilesFEnd()
begin
 XMLLineOut("</MasterFiles>",1);
 return;
end;

procedure iSAFSourceDocStart()
begin
 XMLLineOut("<SourceDocuments>",1);
 //GetExpencesInfo;
 return;
end;

procedure iSAFSourceDocEnd()
begin
 XMLLineOut("</SourceDocuments>",1);
 return;
end; 

global 
procedure LitVMIiSAFEn(Record RcVc RepSpec)
begin
  record SMVc TotVEValr,TotCUValr;
  integer cucnt,vecnt,ivcnt,vicnt;
  //logtext(0,"ISAF eksportas-Pradzia======================================")
  if (SetExportCodePage("UTF-8") == false) then begin end;
  XMLHeaderStart;
  // xml file body START
  iSAFHeaderStart("iSAF1.2",RepSpec.flags[0],RepSpec.f6,RepSpec.sStartDate,RepSpec.sEndDate);
  iSAFHeaderEnd;
  
  iSAFMasterFilesStart(RepSpec,cucnt,vecnt);
  iSAFMasterFilesFEnd;
  
  iSAFSourceDocStart;  
	 
  //logtext(0,"Pirkimai  ==================================================")
  if (vecnt>0) then begin
  	XMLLineOut("<PurchaseInvoices>",2);
    iSAFPurchInvoices(RepSpec,TotVEValr,false,vicnt);
    XMLLineOut("</PurchaseInvoices>",2);
  end;
  //logtext(0,"Pardavimai==================================================")
  if (cucnt>0) then begin
  	XMLLineOut("<SalesInvoices>",2);
    iSAFSalesInvoices(RepSpec,TotCUValr,false,ivcnt);    
    XMLLineOut("</SalesInvoices>",2);
  end;
	  
  //XMLTagOut("SettlementsAndPayments","",2);
  iSAFSourceDocEnd;
  // xml file body END
  
  XMLHeaderEnd;

  return;
end;

global 
procedure LitVMIiSAFRn(Record RcVc RepSpec)
begin
  record SMVc TotVEValr,TotCUValr;
  row SMVc TotValrw;
  integer cucnt,vecnt,ivcnt,vicnt;
  integer rw;
  string 255 tstr;
  integer i;
  
  StartReportJob("iSAF eksporto dokumentai");
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  switch (RepSpec.flags[0]) begin
    case 0: tstr = USetStr(23871);
  	case 1: tstr = USetStr(23872); 
    case 2: tstr = USetStr(23873);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  tstr = USetStr(2579) & ": ";
  if (RepSpec.flags[1] == 0) then begin
    tstr = tstr & USetStr(13890);
  end;
  if (RepSpec.flags[1] == 1) then begin
    tstr = tstr & USetStr(26567);
  end;
  Header(rw,tstr,1);
  rw = rw + 1;
  if (nonblank(RepSpec.f5)) then begin
    tstr = "Netraukti mok.sal.:" & RepSpec.f5;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  EndHeader;
  
  SetRepCol(2,60);
  SetRepCol(3,115);
  SetRepCol(4,170);
  SetRepCol(5,225);
  SetRepCol(6,250);
  SetRepCol(7,300);
  SetRepCol(8,330);
  
  //Header Begin
  NewPart("1. " & USetStr(7102),false,200);
  iSAFRepHeader("iSAF1.2",RepSpec.flags[0],RepSpec.f6,RepSpec.sStartDate,RepSpec.sEndDate);
  //Header end
  
  //MasterFiles start
  NewPart("2. " & USetStr(23889),false,200);
  iSAFRepMasterFiles(RepSpec,cucnt,vecnt);
  StartFormat(15);
  EndFormat;
  
  //logtext(0,"Pirkimai  ==================================================")
  if (vecnt>0) then begin
  	NewPart("3.1. " & USetStr(12091) & ":",true,70);
    iSAFPurchInvoices(RepSpec,TotVEValr,true,vicnt);
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(1,0, USetStr(8896) & " (" & vicnt & " " & USetStr(12461) & "): ",true);		//Viso pirkima
    EndFormat;
    Gray_Divider(330,1);
	TotalsRowRep(USetStr(23884),USetStr(23886),USetStr(10663));
    Gray_Divider(330,1);
    for (i=0;i<MatRowCnt(TotVEValr);i=i+1) begin
    	MatRowGet(TotVEValr,i,TotValrw);
        TotalsRowRep(TotValrw.VATCode,TotValrw.DebVal,TotValrw.CredVal);
    end;
    Gray_Divider(0,1);
  end;
  
  //logtext(0,"Pardavimai==================================================")
  if (cucnt>0) then begin
  	NewPart("3.2. " & USetStr(12090) & ":",true,70);
    iSAFSalesInvoices(RepSpec,TotCUValr,true,ivcnt);   
    Gray_Divider(0,1);
    StartFormat(15);
    OutString(1,0, USetStr(12411) & " (" & ivcnt & " " & USetStr(12461) & "): ",true);		//Viso pardavimai
    EndFormat;
    Gray_Divider(330,1);
	TotalsRowRep(USetStr(23884),USetStr(23886),USetStr(10663));
    Gray_Divider(330,1);
    for (i=0;i<MatRowCnt(TotCUValr);i=i+1) begin
    	MatRowGet(TotCUValr,i,TotValrw);
        TotalsRowRep(TotValrw.VATCode,TotValrw.DebVal,TotValrw.CredVal);
    end;
    Gray_Divider(0,1);
  end;

  EndJob;
  return;
end;

